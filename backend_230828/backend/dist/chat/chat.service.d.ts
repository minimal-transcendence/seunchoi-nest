import { ChatRoomStoreService, Room } from './store/store.room.service';
import { ChatUserStoreService, User } from './store/store.user.service';
import { ChatMessageStoreService, Message } from './store/store.message.service';
import { Namespace } from 'socket.io';
import { currRoomInfo, formedMessage, queryResponseRoomInfo, roomInfo, userInfo } from './chat.types';
import { ChatSocket } from './types';
export declare class ChatService {
    private storeUser;
    private storeRoom;
    private storeMessage;
    constructor(storeUser: ChatUserStoreService, storeRoom: ChatRoomStoreService, storeMessage: ChatMessageStoreService);
    initChatServer(): void;
    newConnection(io: Namespace, client: ChatSocket): void;
    disconnectUser(io: Namespace, userId: number): Promise<void>;
    userJoinRoomAct(io: Namespace, user: User, roomname: string): Promise<void>;
    JoinRoomBanCheck(io: Namespace, client: ChatSocket, room: Room): boolean;
    userJoinRoom(io: Namespace, client: ChatSocket, roomname: string, password?: string): Promise<void>;
    setPassword(io: Namespace, client: ChatSocket, roomname: string, password: string): void;
    setRoomStatus(io: Namespace, client: ChatSocket, roomname: string, toPrivate: boolean): void;
    sendChat(io: Namespace, client: ChatSocket, to: string, body: string): void;
    userLeaveRoom(io: Namespace, userId: number, roomname: string): void;
    userLeaveRoomAct(io: Namespace, userid: number, roomname: string): Promise<void>;
    userLeaveRooms(io: Namespace, userid: number, roomlist: Set<string>): void;
    kickUser(io: Namespace, client: ChatSocket, roomname: string, targetName: string): Promise<void>;
    banUser(io: Namespace, client: ChatSocket, roomname: string, targetName: string): void;
    muteUser(io: Namespace, client: ChatSocket, roomname: string, targetName: string): void;
    blockUser(io: Namespace, client: ChatSocket, target: string): void;
    unblockUser(io: Namespace, client: ChatSocket, target: string): void;
    addOperator(io: Namespace, client: ChatSocket, roomname: string, target: string): void;
    deleteOperator(io: Namespace, client: ChatSocket, roomname: string, target: string): void;
    getAllRoomList(userId: number): roomInfo[];
    getUserRoomList(userId: number): roomInfo[];
    getQueryRoomList(query: string | null): queryResponseRoomInfo[];
    fetchDM(io: Namespace, client: ChatSocket, target: string, body: string): void;
    makeDMRoomMessages(from: string, to: string): formedMessage[];
    makeUserStatus(userId: number, connection: boolean): userInfo;
    makeRoomInfo(blocklist: Set<number>, roomlist: string[] | Set<string>): roomInfo[];
    makeRoomUserInfo(roomname: string): userInfo[];
    mappingMessagesUserIdToNickname(messages: Message[]): formedMessage[];
    makeCurrRoomInfo(roomname: string): currRoomInfo;
    sendActResultToTarget(io: Namespace, roomname: string, target: number, operation: string): Promise<void>;
    checkActValidity(client: ChatSocket, roomname: string, target: number): boolean;
    emitEventsToAllSockets(io: Namespace, targetId: number, eventname: string, args1?: any, args2?: any): Promise<void>;
    getAllUserInfo(client: ChatSocket): void;
    userChangeNick(io: Namespace, client: ChatSocket, newNick: string): void;
}
